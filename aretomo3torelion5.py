#!/usr/bin/env python3
import os
import json
import argparse
import math
import numpy as np
import sys
from datetime import datetime

def parse_args():
    parser = argparse.ArgumentParser(description='Convert AreTomo3 output to RELION5 star files')
    parser.add_argument('aretomo_dir', type=str, help='Directory containing AreTomo3 output')
    parser.add_argument('--output_dir', type=str, default='relion_star_files',
                        help='Output directory for RELION5 star files')
    parser.add_argument('--verbose', '-v', action='store_true', help='Enable verbose output')
    # Make the dose flag required; this is the dose per tilt step in e-/Å².
    parser.add_argument('--dose', type=float, required=True,
                        help='Nominal electron dose per tilt step in e-/Å². Cumulative exposure will be calculated as index * dose.')
    return parser.parse_args()

# ... (all your existing functions remain unchanged until the dose calculation) ...

def calculate_cumulative_exposure_by_index(tilt_angles, dose):
    """
    Calculate cumulative exposure for each tilt based solely on the order (index) of the tilts.
    Assumes the first tilt (index 0) is 0 exposure and then each subsequent tilt adds one dose unit.
    
    Parameters:
      tilt_angles (list): List of tilt angles (in the order provided by the imod CSV or .tlt file).
      dose (float): Dose per tilt step (e-/Å²).
    
    Returns:
      list: Cumulative exposure for each tilt.
    """
    # The first index gets 0; the i-th tilt gets i*dose.
    exposures = [i * dose for i in range(len(tilt_angles))]
    return exposures

# In create_tilt_series_star() replace the call to the previous dynamic function
# with calculate_cumulative_exposure_by_index.
def create_tilt_series_star(session_data, output_dir, tomo_prefix, aretomo_dir,
                            tilt_angles, xf_data, ctf_data, aln_data, dose_per_tilt):
    """Create the tilt-series star file using AreTomo3 metadata and .mrcs softlinks."""
    os.makedirs(output_dir, exist_ok=True)
    pixel_size = session_data['parameters']['PixSize']
    if "TiltAxis" not in session_data['parameters']:
        raise ValueError("TiltAxis parameter not found in session metadata.")
    tilt_axis = session_data['parameters']["TiltAxis"][0]
    raw_dims = read_dimensions_from_aln_strict(aretomo_dir, tomo_prefix)
    image_dims = (raw_dims[0], raw_dims[1])
    abs_output_dir = os.path.abspath(output_dir)
    even_mrcs_file    = os.path.join(abs_output_dir, f"{tomo_prefix}_EVN.mrcs")
    odd_mrcs_file     = os.path.join(abs_output_dir, f"{tomo_prefix}_ODD.mrcs")
    aligned_mrcs_file = os.path.join(abs_output_dir, f"{tomo_prefix}.mrcs")
    ctf_mrcs_file     = os.path.join(abs_output_dir, f"{tomo_prefix}_CTF.mrcs")

    if ctf_data and ctf_data[0]['tilt_angle'] is None:
        for entry in ctf_data:
            frame_idx = entry['frame'] - 1
            if 0 <= frame_idx < len(tilt_angles):
                entry['tilt_angle'] = tilt_angles[frame_idx]

    # Calculate the cumulative exposure using the simple index-based approach.
    exposures = calculate_cumulative_exposure_by_index(tilt_angles, dose_per_tilt)
    
    tilt_series_star_path = os.path.join(output_dir, f"{tomo_prefix}.star")
    with open(tilt_series_star_path, 'w') as f:
        f.write("# Generated by AreTomo3 to RELION5 converter\n")
        f.write("# Relion star file version 50001\n\n")
        f.write(f"data_{tomo_prefix}\n\n")
        f.write("loop_\n")
        f.write("_rlnMicrographMovieName\n")
        f.write("_rlnTomoTiltMovieFrameCount\n")
        f.write("_rlnTomoNominalStageTiltAngle\n")
        f.write("_rlnTomoNominalTiltAxisAngle\n")
        f.write("_rlnMicrographPreExposure\n")
        f.write("_rlnTomoNominalDefocus\n")
        f.write("_rlnCtfPowerSpectrum\n")
        f.write("_rlnMicrographNameEven\n")
        f.write("_rlnMicrographNameOdd\n")
        f.write("_rlnMicrographName\n")
        f.write("_rlnMicrographMetadata\n")
        f.write("_rlnAccumMotionTotal\n")
        f.write("_rlnAccumMotionEarly\n")
        f.write("_rlnAccumMotionLate\n")
        f.write("_rlnCtfImage\n")
        f.write("_rlnDefocusU\n")
        f.write("_rlnDefocusV\n")
        f.write("_rlnCtfAstigmatism\n")
        f.write("_rlnDefocusAngle\n")
        f.write("_rlnCtfFigureOfMerit\n")
        f.write("_rlnCtfMaxResolution\n")
        f.write("_rlnCtfIceRingDensity\n")
        f.write("_rlnTomoXTilt\n")
        f.write("_rlnTomoYTilt\n")
        f.write("_rlnTomoZRot\n")
        f.write("_rlnTomoXShiftAngst\n")
        f.write("_rlnTomoYShiftAngst\n")
        f.write("_rlnCtfScalefactor\n")
        
        # Loop over tilt images.
        for i, tilt_angle in enumerate(tilt_angles):
            defocus_u = defocus_v = astigmatism_angle = 0.0
            for ctf_entry in ctf_data:
                if 'frame' in ctf_entry and ctf_entry['frame'] == i + 1:
                    defocus_u = ctf_entry['defocus_u']
                    defocus_v = ctf_entry['defocus_v']
                    astigmatism_angle = ctf_entry['astigmatism_angle']
                    break
                elif abs(ctf_entry['tilt_angle'] - tilt_angle) < 0.1:
                    defocus_u = ctf_entry['defocus_u']
                    defocus_v = ctf_entry['defocus_v']
                    astigmatism_angle = ctf_entry['astigmatism_angle']
                    break
            astigmatism = abs(defocus_u - defocus_v)
            defocus_angle = astigmatism_angle
            x_tilt, _, z_rot, x_shift_angst, y_shift_angst = compute_tilt_alignment(xf_data[i], pixel_size)
            y_tilt = tilt_angle
            even_entry    = f"{i+1:06d}@{even_mrcs_file}"
            odd_entry     = f"{i+1:06d}@{odd_mrcs_file}"
            aligned_entry = f"{i+1}@{aligned_mrcs_file}"
            ctf_entry_str = f"{i+1}@{ctf_mrcs_file}"
            ctf_scalefactor = math.cos(math.radians(tilt_angle))
            exposure = exposures[i]
            
            f.write(
                f"FileNotFound   1   {tilt_angle:.6f}   {tilt_axis:.6f}   {exposure:.6f}   0.000000   FileNotFound   "
                f"{even_entry}   {odd_entry}   {aligned_entry}   FileNotFound   0   0   0   {ctf_entry_str}   "
                f"{defocus_u:.6f}   {defocus_v:.6f}   {astigmatism:.6f}   {defocus_angle:.6f}   0   "
                f"10.000000   0.010000   {x_tilt:.6f}   {y_tilt:.6f}   {z_rot:.6f}   {x_shift_angst:.6f}   {y_shift_angst:.6f}   {ctf_scalefactor:.6f}\n"
            )
    
    print(f"Created tilt series star file: {tilt_series_star_path}")
    return tilt_series_star_path

def print_banner():
    """Print a banner with version information."""
    print(f"""
╔══════════════════════════════════════════════════╗
║                                                  ║
║             AreTomo3 to RELION v5.0.0            ║
║                                                  ║
║     Convert AreTomo3 output to RELION5 format    ║
║                                                  ║
╚══════════════════════════════════════════════════╝
""")

def main():
    print_banner()
    args = parse_args()

    if not os.path.exists(args.aretomo_dir):
        print(f"Error: AreTomo3 directory not found: {args.aretomo_dir}", file=sys.stderr)
        sys.exit(1)
    
    try:
        session_data = read_session_json(args.aretomo_dir)
        tomo_prefix = get_tomo_prefix(args.aretomo_dir)
        print(f"Processing tomogram: {tomo_prefix}")
        
        tilt_angles = read_tlt_file(args.aretomo_dir, tomo_prefix)
        print(f"Found {len(tilt_angles)} tilt angles")
        
        xf_data = read_xf_file(args.aretomo_dir, tomo_prefix)
        print(f"Found {len(xf_data)} transformation matrices")
        
        ctf_data = read_ctf_file(args.aretomo_dir, tomo_prefix)
        print(f"Found {len(ctf_data)} CTF entries")
        
        metrics_data = read_metrics_csv(args.aretomo_dir)  # Optional.
        aln_data = read_aln_file(args.aretomo_dir, tomo_prefix)
        if aln_data:
            print(f"Found {len(aln_data)} ALN entries")
        
        os.makedirs(args.output_dir, exist_ok=True)
        print("Creating softlinks with .mrcs extension...")
        links_created, vol_file = create_softlinks(args.aretomo_dir, args.output_dir, tomo_prefix)
        
        start_time = datetime.now()
        create_tomogram_star(session_data, args.output_dir, tomo_prefix, args.aretomo_dir, vol_file)
        create_tilt_series_star(session_data, args.output_dir, tomo_prefix, args.aretomo_dir,
                                tilt_angles, xf_data, ctf_data, aln_data, dose_per_tilt=args.dose)
        end_time = datetime.now()
        elapsed = (end_time - start_time).total_seconds()
        
        print(f"Successfully created RELION5 star files in {args.output_dir}")
        print(f"Processing completed in {elapsed:.2f} seconds")
        
    except Exception as e:
        print(f"Error: {str(e)}", file=sys.stderr)
        if args.verbose:
            import traceback
            traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()
